.TH "net" 3 "Wed Feb 12 2020" "Version v0.4.0" "smxrts" \" -*- nroff -*-
.ad l
.nh
.SH NAME
net
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSMX_LOG\fP(h,  level,  format, \&.\&.\&.)   \fBSMX_LOG_NET\fP( h, level, format, ##__VA_ARGS__ )"
.br
.ti -1c
.RI "#define \fBSMX_NET_GET_CONF\fP(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->conf )"
.br
.ti -1c
.RI "#define \fBSMX_NET_GET_ID\fP(h)   ( ( h == NULL ) ? \-1 : ( ( \fBsmx_net_t\fP* )h )\->id )"
.br
.ti -1c
.RI "#define \fBSMX_NET_GET_NAME\fP(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->name )"
.br
.ti -1c
.RI "#define \fBSMX_NET_GET_IMPL\fP(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->impl )"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBsmx_thread_state_e\fP { \fBSMX_NET_RETURN\fP = 0, \fBSMX_NET_CONTINUE\fP, \fBSMX_NET_END\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBLicense:\fP
.RS 4
This Source Code Form is subject to the terms of the Mozilla Public License, v\&. 2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/\&.
.RE
.PP
Net definitions for the runtime system library of Streamix 
.SH "Macro Definition Documentation"
.PP 
.SS "#define SMX_LOG(h, level, format,  \&.\&.\&.)   \fBSMX_LOG_NET\fP( h, level, format, ##__VA_ARGS__ )"
This macro allows to log events to the log file\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The pointer to the net handler\&. 
.br
\fIlevel\fP Note that this parameter is not a string but the literal name of the box (without quotation marks)\&. Use one of the following levels:
.IP "\(bu" 2
\fCfatal\fP: everything went wrong
.IP "\(bu" 2
\fCerror\fP: an error occured and the net has to terminate
.IP "\(bu" 2
\fCwarn\fP: The net can continue to execute but the result might be faulty
.IP "\(bu" 2
\fCnotice\fP: A useful information to report that occurs on initialisation, cleanup, or rarely during execution\&.
.IP "\(bu" 2
\fCinfo\fP: A useful information to report that occurs during execution\&.
.IP "\(bu" 2
\fCdebug\fP: Debug information\&. 
.PP
.br
\fIformat\fP The \fCprintf\fP format string\&. 
.br
\fI\&.\&.\&.\fP The required arguments to be replaced in the printf format string\&. 
.RE
.PP

.SS "#define SMX_NET_GET_CONF(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->conf )"
Get the net configuration structure\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The pointer to the net handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The net configuration structure of type \fCbson_t\fP\&. 
.RE
.PP

.SS "#define SMX_NET_GET_ID(h)   ( ( h == NULL ) ? \-1 : ( ( \fBsmx_net_t\fP* )h )\->id )"
Get the net id\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The pointer to the net handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The net id of type \fCunsigned int\fP\&. 
.RE
.PP

.SS "#define SMX_NET_GET_IMPL(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->impl )"
Get the box implementation name\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The pointer to the net handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the box implementation name of type \fCconst char*\fP\&. 
.RE
.PP

.SS "#define SMX_NET_GET_NAME(h)   ( ( h == NULL ) ? NULL : ( ( \fBsmx_net_t\fP* )h )\->name )"
Get the net name\&.
.PP
\fBParameters:\fP
.RS 4
\fIh\fP The pointer to the net handler\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the net name of type \fCconst char*\fP\&. 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBsmx_thread_state_e\fP"
Constants to indicate wheter a thread should terminate or continue\&. Use one of these values to return from the main box implemenation funtion\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISMX_NET_RETURN \fP\fP
decide automatically wheather to end or go on 
.TP
\fB\fISMX_NET_CONTINUE \fP\fP
continue to call the box implementation fct 
.TP
\fB\fISMX_NET_END \fP\fP
end thread 
.SH "Author"
.PP 
Generated automatically by Doxygen for smxrts from the source code\&.
