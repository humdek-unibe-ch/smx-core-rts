.TH "include/smxtypes.h" 3 "Wed Feb 12 2020" "Version v0.4.0" "smxrts" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/smxtypes.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <zlog\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsmx_channel_s\fP"
.br
.RI "A generic Streamix channel\&. "
.ti -1c
.RI "struct \fBsmx_channel_end_s\fP"
.br
.ti -1c
.RI "struct \fBsmx_collector_s\fP"
.br
.RI "Collect channel counts\&. "
.ti -1c
.RI "struct \fBsmx_fifo_s\fP"
.br
.RI "Streamix fifo structure\&. "
.ti -1c
.RI "struct \fBsmx_fifo_item_s\fP"
.br
.RI "A single FIFO item of a circular double-linked-list\&. "
.ti -1c
.RI "struct \fBsmx_guard_s\fP"
.br
.RI "timed guard to limit communication rate "
.ti -1c
.RI "struct \fBsmx_msg_s\fP"
.br
.RI "A Streamix message structure\&. "
.ti -1c
.RI "struct \fBsmx_net_s\fP"
.br
.ti -1c
.RI "struct \fBsmx_net_sig_s\fP"
.br
.ti -1c
.RI "struct \fBsmx_channel_end_s\&.filter\fP"
.br
.ti -1c
.RI "struct \fBsmx_net_sig_s\&.in\fP"
.br
.ti -1c
.RI "struct \fBsmx_net_sig_s\&.out\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBsmx_channel_err_e\fP \fBsmx_channel_err_t\fP"
.br
.ti -1c
.RI "typedef enum \fBsmx_channel_state_e\fP \fBsmx_channel_state_t\fP"
.br
.ti -1c
.RI "typedef enum \fBsmx_channel_type_e\fP \fBsmx_channel_type_t\fP"
.br
.ti -1c
.RI "typedef enum \fBsmx_config_error_e\fP \fBsmx_config_error_t\fP"
.br
.ti -1c
.RI "typedef enum \fBsmx_profiler_action_e\fP \fBsmx_profiler_action_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_channel_s\fP \fBsmx_channel_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_channel_end_s\fP \fBsmx_channel_end_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_collector_s\fP \fBsmx_collector_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_fifo_s\fP \fBsmx_fifo_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_fifo_item_s\fP \fBsmx_fifo_item_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_guard_s\fP \fBsmx_guard_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_msg_s\fP \fBsmx_msg_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_net_s\fP \fBsmx_net_t\fP"
.br
.ti -1c
.RI "typedef struct \fBsmx_net_sig_s\fP \fBsmx_net_sig_t\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBsmx_channel_err_e\fP { \fBSMX_CHANNEL_ERR_NONE\fP = 0, \fBSMX_CHANNEL_ERR_NO_DEFAULT\fP, \fBSMX_CHANNEL_ERR_NO_TARGET\fP, \fBSMX_CHANNEL_ERR_DL_MISS\fP, \fBSMX_CHANNEL_ERR_NO_DATA\fP, \fBSMX_CHANNEL_ERR_NO_SPACE\fP, \fBSMX_CHANNEL_ERR_FILTER\fP, \fBSMX_CHANNEL_ERR_UNINITIALISED\fP }"
.br
.ti -1c
.RI "enum \fBsmx_channel_state_e\fP { \fBSMX_CHANNEL_UNINITIALISED\fP, \fBSMX_CHANNEL_PENDING\fP, \fBSMX_CHANNEL_READY\fP, \fBSMX_CHANNEL_END\fP }
.RI "Channel state\&. ""
.br
.ti -1c
.RI "enum \fBsmx_channel_type_e\fP { \fBSMX_FIFO\fP, \fBSMX_FIFO_D\fP, \fBSMX_D_FIFO\fP, \fBSMX_D_FIFO_D\fP }
.RI "Streamix channel (buffer) types\&. ""
.br
.ti -1c
.RI "enum \fBsmx_config_error_e\fP { \fBSMX_CONFIG_ERROR_NO_ERROR\fP, \fBSMX_CONFIG_ERROR_BAD_TYPE\fP, \fBSMX_CONFIG_ERROR_NO_VALUE\fP }"
.br
.ti -1c
.RI "enum \fBsmx_profiler_action_e\fP { \fBSMX_PROFILER_ACTION_START\fP, \fBSMX_PROFILER_ACTION_CREATE\fP, \fBSMX_PROFILER_ACTION_DESTROY\fP, \fBSMX_PROFILER_ACTION_COPY\fP, \fBSMX_PROFILER_ACTION_READ\fP, \fBSMX_PROFILER_ACTION_READ_COLLECTOR\fP, \fBSMX_PROFILER_ACTION_WRITE\fP, \fBSMX_PROFILER_ACTION_WRITE_COLLECTOR\fP, \fBSMX_PROFILER_ACTION_OVERWRITE\fP, \fBSMX_PROFILER_ACTION_DISMISS\fP, \fBSMX_PROFILER_ACTION_DUPLICATE\fP, \fBSMX_PROFILER_ACTION_DL_MISS_SRC\fP, \fBSMX_PROFILER_ACTION_DL_MISS_SRC_CP\fP, \fBSMX_PROFILER_ACTION_TT_MISS_SRC\fP, \fBSMX_PROFILER_ACTION_TT_MISS_SRC_CP\fP, \fBSMX_PROFILER_ACTION_DL_MISS_SINK\fP, \fBSMX_PROFILER_ACTION_TT_MISS_SINK\fP }"
.br
.ti -1c
.RI "enum \fBsmx_thread_state_e\fP { \fBSMX_NET_RETURN\fP = 0, \fBSMX_NET_CONTINUE\fP, \fBSMX_NET_END\fP }"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor:\fP
.RS 4
Simon Maurer 
.RE
.PP
\fBLicense:\fP
.RS 4
This Source Code Form is subject to the terms of the Mozilla Public License, v\&. 2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/\&.
.RE
.PP
Type definitions for the runtime system library of Streamix 
.SH "Data Structure Documentation"
.PP 
.SH "struct smx_channel_s"
.PP 
A generic Streamix channel\&. 
.PP
\fBData Fields:\fP
.RS 4
zlog_category_t * \fIcat\fP zlog category of a channel end 
.br
.PP
pthread_mutex_t \fIch_mutex\fP mutual exclusion 
.br
.PP
\fBsmx_collector_t\fP * \fIcollector\fP \fBsmx_collector_s\fP, collect signals 
.br
.PP
\fBsmx_fifo_t\fP * \fIfifo\fP \fBsmx_fifo_s\fP 
.br
.PP
\fBsmx_guard_t\fP * \fIguard\fP \fBsmx_guard_s\fP 
.br
.PP
int \fIid\fP the id of the channel 
.br
.PP
const char * \fIname\fP name of the channel 
.br
.PP
\fBsmx_channel_end_t\fP * \fIsink\fP \fBsmx_channel_end_s\fP 
.br
.PP
\fBsmx_channel_end_t\fP * \fIsource\fP \fBsmx_channel_end_s\fP 
.br
.PP
\fBsmx_channel_type_t\fP \fItype\fP type of the channel 
.br
.PP
.RE
.PP
.SH "struct smx_collector_s"
.PP 
Collect channel counts\&. 

This is used to nondeterministically merge channels with a copy synchronyzer that has multiple inputs\&. 
.PP
\fBData Fields:\fP
.RS 4
pthread_cond_t \fIcol_cv\fP conditional variable to trigger box 
.br
.PP
pthread_mutex_t \fIcol_mutex\fP mutual exclusion 
.br
.PP
int \fIcount\fP collection of channel counts 
.br
.PP
\fBsmx_channel_state_t\fP \fIstate\fP state of the channel 
.br
.PP
.RE
.PP
.SH "struct smx_fifo_s"
.PP 
Streamix fifo structure\&. 

The fifo structure is blocking on write if all buffers are occupied and blocking on read if all buffer spaces are empty\&. The blocking pattern can be changed by decoupling either the input, the output or both\&. 
.PP
\fBData Fields:\fP
.RS 4
\fBsmx_msg_t\fP * \fIbackup\fP \fBsmx_msg_s\fP, msg space for decoupling 
.br
.PP
int \fIcopy\fP counts number of copy operations 
.br
.PP
int \fIcount\fP counts occupied space 
.br
.PP
\fBsmx_fifo_item_t\fP * \fIhead\fP pointer to the heda of the FIFO 
.br
.PP
int \fIlength\fP size of the FIFO 
.br
.PP
int \fIoverwrite\fP counts number of overwrite operations 
.br
.PP
\fBsmx_fifo_item_t\fP * \fItail\fP pointer to the tail of the FIFO 
.br
.PP
.RE
.PP
.SH "struct smx_fifo_item_s"
.PP 
A single FIFO item of a circular double-linked-list\&. 
.PP
\fBData Fields:\fP
.RS 4
\fBsmx_msg_t\fP * \fImsg\fP \fBsmx_msg_s\fP 
.br
.PP
\fBsmx_fifo_item_t\fP * \fInext\fP pointer to the next item 
.br
.PP
\fBsmx_fifo_item_t\fP * \fIprev\fP pointer to the previous item 
.br
.PP
.RE
.PP
.SH "struct smx_guard_s"
.PP 
timed guard to limit communication rate 
.PP
\fBData Fields:\fP
.RS 4
int \fIfd\fP file descriptor pointing to timer 
.br
.PP
struct timespec \fIiat\fP minumum inter-arrival-time 
.br
.PP
.RE
.PP
.SH "struct smx_net_s"
.PP 
Common fields of a streamix net\&. 
.PP
\fBData Fields:\fP
.RS 4
void * \fIattr\fP custom attributes of special nets 
.br
.PP
zlog_category_t * \fIcat\fP the log category 
.br
.PP
void * \fIconf\fP pointer to the XML configuration 
.br
.PP
unsigned long \fIcount\fP loop counter 
.br
.PP
struct timespec \fIend_wall\fP end time of a net (befoer cleanup) 
.br
.PP
bool \fIhas_profiler\fP is profiler enabled? 
.br
.PP
bool \fIhas_type_filter\fP is type filter enabled? 
.br
.PP
unsigned int \fIid\fP a unique net id 
.br
.PP
const char * \fIimpl\fP the name of the box implementation 
.br
.PP
pthread_barrier_t * \fIinit_done\fP pointer to the init sync barrier 
.br
.PP
const char * \fIname\fP the name of the net 
.br
.PP
int \fIpriority\fP the thread priority of the net\&. 0 means ET, >0 means TT 
.br
.PP
\fBsmx_net_sig_t\fP * \fIsig\fP the net port signature 
.br
.PP
struct timespec \fIstart_wall\fP start time of a net (after init) 
.br
.PP
.RE
.PP
.SH "struct smx_net_sig_s"
.PP 
The signature of a net 
.PP
\fBData Fields:\fP
.RS 4
struct \fBsmx_net_sig_s\fP \fIin\fP input channels 
.br
.PP
struct \fBsmx_net_sig_s\fP \fIout\fP output channels 
.br
.PP
.RE
.PP
.SH "struct smx_channel_end_s\&.filter"
.PP 
\fBData Fields:\fP
.RS 4
int \fIcount\fP 
.br
.PP
char ** \fIitems\fP 
.br
.PP
.RE
.PP
.SH "struct smx_net_sig_s\&.in"
.PP 
\fBData Fields:\fP
.RS 4
int \fIcount\fP the number of connected input ports 
.br
.PP
int \fIlen\fP the number of input ports 
.br
.PP
\fBsmx_channel_t\fP ** \fIports\fP an array of channel pointers 
.br
.PP
.RE
.PP
.SH "struct smx_net_sig_s\&.out"
.PP 
\fBData Fields:\fP
.RS 4
int \fIcount\fP the number of connected output ports 
.br
.PP
int \fIlen\fP the number of output ports 
.br
.PP
\fBsmx_channel_t\fP ** \fIports\fP an array of channel pointers 
.br
.PP
.RE
.PP
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBsmx_channel_end_s\fP \fBsmx_channel_end_t\fP"
\fBsmx_channel_end_s\fP 
.SS "typedef enum \fBsmx_channel_state_e\fP \fBsmx_channel_state_t\fP"
\fBsmx_channel_state_e\fP 
.SS "typedef struct \fBsmx_channel_s\fP \fBsmx_channel_t\fP"
\fBsmx_channel_s\fP 
.SS "typedef enum \fBsmx_channel_type_e\fP \fBsmx_channel_type_t\fP"
\fBsmx_channel_type_e\fP 
.SS "typedef struct \fBsmx_collector_s\fP \fBsmx_collector_t\fP"
\fBsmx_collector_s\fP 
.SS "typedef enum \fBsmx_config_error_e\fP \fBsmx_config_error_t\fP"
\fBsmx_config_error_e\fP 
.SS "typedef struct \fBsmx_fifo_item_s\fP \fBsmx_fifo_item_t\fP"
\fBsmx_fifo_item_s\fP 
.SS "typedef struct \fBsmx_fifo_s\fP \fBsmx_fifo_t\fP"
\fBsmx_fifo_s\fP 
.SS "typedef struct \fBsmx_guard_s\fP \fBsmx_guard_t\fP"
\fBsmx_guard_s\fP 
.SS "typedef struct \fBsmx_net_sig_s\fP \fBsmx_net_sig_t\fP"
\fBsmx_net_sig_s\fP 
.SS "typedef struct \fBsmx_net_s\fP \fBsmx_net_t\fP"
\fBsmx_net_s\fP 
.SS "typedef enum \fBsmx_profiler_action_e\fP \fBsmx_profiler_action_t\fP"
\fBsmx_profiler_action_e\fP 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBsmx_channel_state_e\fP"

.PP
Channel state\&. This allows to indicate wheter a producer connected to the channel has terminated and wheter data is available to read\&. The second point is important in combination with copy synchronizers\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISMX_CHANNEL_UNINITIALISED \fP\fP
decoupled channel was never written to 
.TP
\fB\fISMX_CHANNEL_PENDING \fP\fP
channel is waiting for a signal 
.TP
\fB\fISMX_CHANNEL_READY \fP\fP
channel is ready to read from 
.TP
\fB\fISMX_CHANNEL_END \fP\fP
net connected to channel end has terminated 
.SS "enum \fBsmx_channel_type_e\fP"

.PP
Streamix channel (buffer) types\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISMX_FIFO \fP\fP
a simple FIFO 
.TP
\fB\fISMX_FIFO_D \fP\fP
a FIFO with decoupled output 
.TP
\fB\fISMX_D_FIFO \fP\fP
a FIFO with decoupled input 
.TP
\fB\fISMX_D_FIFO_D \fP\fP
a FIFO with decoupled input and output 
.SS "enum \fBsmx_profiler_action_e\fP"
The different actions a profiler can log\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISMX_PROFILER_ACTION_START \fP\fP
start a net\&. 
.TP
\fB\fISMX_PROFILER_ACTION_CREATE \fP\fP
create a msg, channel, or net\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DESTROY \fP\fP
destroy a msg, channel, or net\&. 
.TP
\fB\fISMX_PROFILER_ACTION_COPY \fP\fP
copy a message\&. 
.TP
\fB\fISMX_PROFILER_ACTION_READ \fP\fP
read from a channel\&. 
.TP
\fB\fISMX_PROFILER_ACTION_READ_COLLECTOR \fP\fP
read from a collector\&. 
.TP
\fB\fISMX_PROFILER_ACTION_WRITE \fP\fP
write to a channel\&. 
.TP
\fB\fISMX_PROFILER_ACTION_WRITE_COLLECTOR \fP\fP
write to a collector\&. 
.TP
\fB\fISMX_PROFILER_ACTION_OVERWRITE \fP\fP
overwrite a message in a channel\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DISMISS \fP\fP
dismiss a message in a channel\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DUPLICATE \fP\fP
duplicate a message in a channel\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DL_MISS_SRC \fP\fP
rt producer missed a deadline\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DL_MISS_SRC_CP \fP\fP
rt producer missed a deadline, msg duplicated\&. 
.TP
\fB\fISMX_PROFILER_ACTION_TT_MISS_SRC \fP\fP
non-rt producer missed a tt interval\&. 
.TP
\fB\fISMX_PROFILER_ACTION_TT_MISS_SRC_CP \fP\fP
non-rt producer missed a tt interval, msg duplicated\&. 
.TP
\fB\fISMX_PROFILER_ACTION_DL_MISS_SINK \fP\fP
rt consumer missed a deadline\&. 
.TP
\fB\fISMX_PROFILER_ACTION_TT_MISS_SINK \fP\fP
non-rt consumer missed a tt interval\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for smxrts from the source code\&.
